{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/rng.js","components/ui/WeatherDataItem.jsx","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/pages/ForecastDataList.jsx","components/pages/WeatherInfo.jsx"],"names":["getRandomValues","WeatherDataItemBody","styled","li","WeatherDataIcon","div","WeatherDataValue","h5","WeatherDataTitle","h6","WeatherDataItem","title","value","units","imageData","faTint","faCompass","faWind","faLocationArrow","faTemperatureLow","faEye","icon","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","ForecastDataListBody","ul","ForecastDataList","data","map","item","time","temp","humidity","pressure","className","src","process","alt","uuidv4","WeatherInfoBody","MainInfo","CityName","WeatherData","TempValue","WeatherType","WeatherImage","SunInfo","WeatherDetails","Forecast","ForecastNav","WeatherInfo","today","week","useState","isDay","setIsDay","faMapMarkerAlt","city","weatherType","sunrise","sunset","keyIndicators","onClick","hourly"],"mappings":"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","file":"static/js/3.7729c2ee.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faTint, faCompass, faWind, faLocationArrow, faTemperatureLow, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst WeatherDataItem = ({ title, value, units }) => {\r\n    const imageData = {\r\n        'Humidity': faTint,\r\n        'Pressure': faCompass,\r\n        'Wind Speed': faWind,\r\n        'Wind Direction': faLocationArrow,\r\n        'Feels Like': faTemperatureLow,\r\n        'Visibility': faEye\r\n    };\r\n\r\n    return (\r\n        <WeatherDataItemBody>\r\n            <WeatherDataIcon>\r\n                <FontAwesomeIcon icon={imageData[title]} />\r\n            </WeatherDataIcon>\r\n            <WeatherDataValue>\r\n                {value}\r\n                <span> {units}</span>\r\n            </WeatherDataValue>\r\n            <WeatherDataTitle>\r\n                {title}\r\n            </WeatherDataTitle>\r\n        </WeatherDataItemBody>\r\n    );\r\n};\r\n\r\n\r\nconst WeatherDataItemBody = styled.li`\r\n    position: relative;\r\n    padding: 30px 0;\r\n    width: 30%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst WeatherDataIcon = styled.div`\r\n    font-size: 30px;\r\n    color: rgb(132, 74, 198);\r\n`;\r\n\r\nconst WeatherDataValue = styled.h5`\r\n    margin: 0;\r\n    padding: 10px 0;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n`;\r\n\r\nconst WeatherDataTitle = styled.h6`\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 14px;\r\n    font-weight: 200;\r\n`;\r\n\r\n\r\nexport default WeatherDataItem;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React from 'react';\r\nimport styled  from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTint, faCompass } from '@fortawesome/free-solid-svg-icons'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nconst ForecastDataList = ({ data }) => {\r\n    return (\r\n        <ForecastDataListBody>\r\n            {data.map(item => {\r\n                const { time, temp, icon, humidity, pressure } = item;\r\n                return (\r\n                    <li key={uuidv4()}>\r\n                        <div className='time'>{time}</div>\r\n                        <div>{temp} &deg;C</div>\r\n                        <div>\r\n                            <img src={`${process.env.PUBLIC_URL}/img/${icon}.png`} alt='img'></img>\r\n                        </div>\r\n                        <div>\r\n                            <FontAwesomeIcon icon={faTint} />\r\n                            {` ${humidity} %`}\r\n                        </div>\r\n                        <div>\r\n                            <FontAwesomeIcon icon={faCompass} />\r\n                            {` ${pressure} mm.m`}\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ForecastDataListBody>\r\n    );\r\n};\r\n\r\n\r\nconst ForecastDataListBody = styled.ul`\r\n    position: relative;\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    font-size: 14px;\r\n    color: rgb(255, 255, 255);\r\n    box-sizing: border-box;\r\n\r\n    li {\r\n        position: relative;\r\n        margin: 10px 0;\r\n        padding: 5px 10px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        border-radius: 5px;\r\n        background: rgba(255, 255, 255, .15);\r\n\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n\r\n        div {\r\n            text-align: left;\r\n            &:first-child {\r\n                width: 20%;\r\n\r\n                @media (max-width: 768px) {\r\n                    width: 25%;\r\n                }\r\n            }\r\n        }\r\n        img {\r\n            height: 34px;\r\n\r\n            @media (max-width: 320px) {\r\n                height: 26px;\r\n            }\r\n        }\r\n\r\n        .time {\r\n            font-weight: 700;\r\n        }\r\n\r\n        @media (max-width: 320px) {\r\n            font-size: 10px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default ForecastDataList;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport WeatherDataItem from '../ui/WeatherDataItem';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport ForecastDataList from './ForecastDataList';\r\n\r\n\r\nconst WeatherInfo = ({ data }) => {\r\n    const {today, week} = data;\r\n    const [isDay, setIsDay] = useState(true);\r\n    const handleWeatherData = () => {\r\n;        setIsDay(!isDay);\r\n    };\r\n\r\n    return (\r\n        <WeatherInfoBody>\r\n            <CityName>\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} />\r\n                <span>{today.city}</span>\r\n            </CityName>\r\n            <MainInfo>\r\n                <WeatherData>\r\n                    <TempValue>\r\n                        {today.temp}\r\n                        <span>&deg;C</span> \r\n                    </TempValue>\r\n                    <WeatherType>\r\n                        {today.weatherType}\r\n                    </WeatherType>\r\n                </WeatherData>\r\n                <WeatherImage>\r\n                    <img src={`${process.env.PUBLIC_URL}/img/${today.icon}.png`} alt='img'></img>\r\n                </WeatherImage>\r\n            </MainInfo>\r\n            <SunInfo>\r\n                <div>Sunrise: <span>{today.sunrise}</span></div>\r\n                <div>Sunset: <span>{today.sunset}</span></div>\r\n            </SunInfo>\r\n            <WeatherDetails>\r\n                {today.keyIndicators.map(item => {\r\n                    return (\r\n                        <WeatherDataItem\r\n                            key={uuidv4()}\r\n                            value={item.value} \r\n                            title={item.title} \r\n                            units={item.units}\r\n                        />\r\n                    )\r\n                })}\r\n            </WeatherDetails>\r\n            <Forecast>\r\n                <ForecastNav>\r\n                    <h3>{isDay ? 'Next 24 hours' : 'Week'}</h3>\r\n                    <button onClick={handleWeatherData}>{isDay ? 'Show week forecast' : 'Show current forecast'}</button>\r\n                </ForecastNav>\r\n                <ForecastDataList data={isDay ? today.hourly : week} />\r\n            </Forecast>\r\n        </WeatherInfoBody>\r\n    )\r\n};\r\n\r\n\r\nconst WeatherInfoBody = styled.div`\r\n    position: relative;\r\n    padding: 10px 0;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst MainInfo = styled.div`\r\n    position: relative;\r\n    margin: 20px 0;\r\n    width: 100%;\r\n    padding: 10px 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    background: linear-gradient(90deg, rgba(146,86,215,1) 0%, rgba(51,168,201,1) 100%);\r\n    color: rgb(255, 255, 255);\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst CityName = styled.div`\r\n    font-size: 20px;\r\n    color: rgb(231, 20, 92);\r\n    span {\r\n        margin-left: 5px;\r\n        color: rgb(101, 109, 112);\r\n    }\r\n`;\r\n\r\nconst WeatherData = styled.div`\r\n    margin: 0 15px;\r\n    padding-right: 20px;\r\n    border-right: 1px solid rgb(255, 255, 255);\r\n`;\r\n\r\nconst TempValue = styled.div`\r\n    font-size: 56px;\r\n    font-weight: 600;\r\n    line-height: 56px;\r\n\r\n    @media (max-width: 320px) {\r\n        font-size: 46px;\r\n    }\r\n`;\r\n\r\nconst WeatherType = styled.div`\r\n    font-size: 26px;\r\n`;\r\n\r\nconst WeatherImage = styled.div`\r\n    img {\r\n        width: 100px;\r\n    }\r\n`;\r\n\r\nconst SunInfo = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst WeatherDetails = styled.ul`\r\n    position: relative;\r\n    width: 100%;\r\n    margin: 20px 0;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    background: rgb(231, 235, 235);\r\n`;\r\n\r\nconst Forecast = styled.div`\r\n    position: relative;\r\n    padding: 20px;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    background: linear-gradient(90deg, rgba(109,191,212,1) 0%, rgba(40,127,199,1) 100%);\r\n    box-sizing: border-box;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 10px\r\n    }\r\n`;\r\n\r\nconst ForecastNav = styled.div`\r\n    margin-bottom: 20px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    \r\n    h3 {\r\n        margin: 0;\r\n        font-size: 26px;\r\n        color: rgb(255, 255, 255);\r\n\r\n        @media (max-width: 768px) {\r\n            margin-bottom:  10px;\r\n        }\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        width: 170px;\r\n        height: 36px;\r\n        font-weight: 600;\r\n        border: 1px solid rgb(255, 255, 255);\r\n        border-radius: 5px;\r\n        background: transparent;\r\n        color: rgb(255, 255, 255);\r\n\r\n        @media (max-width: 768px) {\r\n            width: 80%;\r\n            height: 46px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        @media (max-width: 320px) {\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\n\r\nexport default WeatherInfo;"],"sourceRoot":""}